[
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 1,
    "difficulty": "beginner",
    "exercise": "Create a function called 'sum_all' that takes any number of arguments and returns their sum using *args."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 2,
    "difficulty": "beginner",
    "exercise": "Write a function called 'multiply_all' that accepts any number of arguments and returns their product using *args."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 3,
    "difficulty": "beginner",
    "exercise": "Create a function called 'print_args' that prints each argument on a new line using *args."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 4,
    "difficulty": "beginner",
    "exercise": "Write a function called 'find_max' that returns the maximum value from any number of arguments using *args."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 5,
    "difficulty": "beginner",
    "exercise": "Create a function called 'count_args' that returns the number of arguments passed to it using *args."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 6,
    "difficulty": "beginner",
    "exercise": "Write a function called 'combine_strings' that concatenates any number of string arguments with a space between them using *args."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 7,
    "difficulty": "beginner",
    "exercise": "Create a function called 'print_kwargs' that prints each key-value pair from **kwargs on a separate line."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 8,
    "difficulty": "beginner",
    "exercise": "Write a function called 'create_person' that accepts name, age, and any other attributes as **kwargs and returns a dictionary containing all the information."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 9,
    "difficulty": "beginner",
    "exercise": "Create a function called 'has_key' that checks if a specific key exists in the **kwargs and returns True or False."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 10,
    "difficulty": "beginner",
    "exercise": "Write a function called 'format_name' that accepts first_name and last_name as required arguments and title (Mr., Ms., etc.) as an optional keyword argument using **kwargs."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 11,
    "difficulty": "intermediate",
    "exercise": "Create a function called 'both_args_kwargs' that takes both *args and **kwargs and returns a tuple containing the sum of args and the number of kwargs."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 12,
    "difficulty": "intermediate",
    "exercise": "Write a function called 'filter_kwargs' that accepts **kwargs and returns a new dictionary containing only the keys that start with a specific prefix (also passed as an argument)."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 13,
    "difficulty": "intermediate",
    "exercise": "Create a function called 'args_types' that counts how many arguments of each type (int, str, list, etc.) were passed using *args and returns a dictionary with the counts."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 14,
    "difficulty": "intermediate",
    "exercise": "Write a function called 'required_kwargs' that ensures specific keys are present in **kwargs and raises an error if they're missing."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 15,
    "difficulty": "intermediate",
    "exercise": "Create a function called 'math_operation' that performs a specified operation (passed as a kwarg 'operation') on all the numbers passed as *args."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 16,
    "difficulty": "intermediate",
    "exercise": "Write a function called 'format_string' that takes a template string as the first argument and uses **kwargs to replace placeholders in the template."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 17,
    "difficulty": "intermediate",
    "exercise": "Create a 'logger' function that logs messages with timestamps, accepting a message as the first argument and optional metadata as **kwargs."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 18,
    "difficulty": "intermediate",
    "exercise": "Write a function called 'merge_dicts' that merges multiple dictionaries passed as *args into a single dictionary."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 19,
    "difficulty": "intermediate",
    "exercise": "Create a function called 'call_function' that takes another function as the first argument, followed by *args and **kwargs to pass to that function."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 20,
    "difficulty": "intermediate",
    "exercise": "Write a decorator function using *args and **kwargs that measures and prints the execution time of any function it decorates."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 21,
    "difficulty": "advanced",
    "exercise": "Create a 'curried_function' that uses *args to collect arguments over multiple calls until a certain condition is met, then performs a computation."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 22,
    "difficulty": "advanced",
    "exercise": "Write a 'command_router' function that uses the first argument as a command name and routes to different functions based on that name, passing the remaining *args and **kwargs."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 23,
    "difficulty": "advanced",
    "exercise": "Create a 'validate_args' function that checks if all *args meet certain validation criteria (specified as **kwargs) and raises appropriate errors."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 24,
    "difficulty": "advanced",
    "exercise": "Write a 'partial_apply' function that creates a new function with some arguments of another function pre-filled using *args and **kwargs."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 25,
    "difficulty": "advanced",
    "exercise": "Create a 'cache_results' decorator that caches function results based on the *args and **kwargs passed to it, avoiding recomputation for the same inputs."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 26,
    "difficulty": "advanced",
    "exercise": "Write a 'compose' function that takes multiple functions as *args and returns a new function that applies them in sequence, passing the result of each to the next."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 27,
    "difficulty": "advanced",
    "exercise": "Create a 'retry' decorator that retries a function call a specified number of times if it raises certain exceptions, preserving the original *args and **kwargs."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 28,
    "difficulty": "advanced",
    "exercise": "Write a 'multi_dispatch' function that calls different implementations based on the types of *args, similar to function overloading in other languages."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 29,
    "difficulty": "advanced",
    "exercise": "Create a 'pipeline' function that processes data through a series of transformation functions specified as *args, with configuration options as **kwargs."
  },
  {
    "notebook": "6_args_kwargs.ipynb",
    "chapter_index": "args and kwargs",
    "exercise_number": 30,
    "difficulty": "advanced",
    "exercise": "Write a 'dynamic_object' class factory that creates classes with methods and attributes specified via *args and **kwargs, demonstrating metaprogramming."
  }
] 