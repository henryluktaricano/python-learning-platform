[
  {
    "notebook": "14_File_Handling.ipynb",
    "chapter_index": "File Handling - Reading",
    "exercise_number": 1,
    "difficulty": "beginner",
    "exercise": "Open a file named 'sample.txt' containing some text, read its entire contents using the read() method, and print the result."
  },
  {
    "notebook": "14_File_Handling.ipynb",
    "chapter_index": "File Handling - Reading",
    "exercise_number": 2,
    "difficulty": "beginner",
    "exercise": "Open a file named 'lines.txt' containing multiple lines of text, use the readlines() method to get a list of all lines, and print the list."
  },
  {
    "notebook": "14_File_Handling.ipynb",
    "chapter_index": "File Handling - Reading",
    "exercise_number": 3,
    "difficulty": "beginner",
    "exercise": "Open a file, read its contents using read(), and then try to read it again without closing the file. What happens? Use seek(0) to reset the cursor position and read the file again."
  },
  {
    "notebook": "14_File_Handling.ipynb",
    "chapter_index": "File Handling - Reading",
    "exercise_number": 4,
    "difficulty": "beginner",
    "exercise": "Open a file named 'numbers.txt' containing numbers on separate lines. Use readlines() to get all lines, then convert each line to an integer and calculate the sum of the numbers."
  },
  {
    "notebook": "14_File_Handling.ipynb",
    "chapter_index": "File Handling - Reading",
    "exercise_number": 5,
    "difficulty": "intermediate",
    "exercise": "Open a file with several paragraphs of text. Read the entire content, then use the string's split() method to count the number of words in the file."
  },
  {
    "notebook": "14_File_Handling.ipynb",
    "chapter_index": "File Handling - Reading",
    "exercise_number": 6,
    "difficulty": "intermediate",
    "exercise": "Read a file containing comma-separated values (CSV format). Use readlines() to get all lines, then split each line by commas to get individual values. Print the data in a structured format."
  },
  {
    "notebook": "14_File_Handling.ipynb",
    "chapter_index": "File Handling - Reading",
    "exercise_number": 7,
    "difficulty": "intermediate",
    "exercise": "Open a file, read the first line only, then use seek() to move the cursor to a specific position in the file. Read the rest of the file from that position."
  },
  {
    "notebook": "14_File_Handling.ipynb",
    "chapter_index": "File Handling - Reading",
    "exercise_number": 8,
    "difficulty": "intermediate",
    "exercise": "Create a function that takes a filename as input and returns a dictionary where keys are words from the file and values are the count of how many times each word appears."
  },
  {
    "notebook": "14_File_Handling.ipynb",
    "chapter_index": "File Handling - Reading",
    "exercise_number": 9,
    "difficulty": "advanced",
    "exercise": "Write a function that takes a filename and a search string as parameters, then searches the file for occurrences of the string. Return a list of line numbers where the string is found."
  },
  {
    "notebook": "14_File_Handling.ipynb",
    "chapter_index": "File Handling - Reading",
    "exercise_number": 10,
    "difficulty": "advanced",
    "exercise": "Read a text file containing a simple log format with timestamps and messages. Parse the file line by line and create a dictionary where keys are dates and values are lists of messages logged on that date."
  }
] 