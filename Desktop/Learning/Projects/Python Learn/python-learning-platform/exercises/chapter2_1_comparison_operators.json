[
  {
    "notebook": "1_Comparison_Operators.ipynb",
    "chapter_index": "Comparison Operators",
    "exercise_number": 1,
    "difficulty": "beginner",
    "exercise": "Create two variables: x = 10 and y = 5. Use the equality operator (==) to check if they are equal, and print the result."
  },
  {
    "notebook": "1_Comparison_Operators.ipynb",
    "chapter_index": "Comparison Operators",
    "exercise_number": 2,
    "difficulty": "beginner",
    "exercise": "Create two string variables with the same value: s1 = 'hello' and s2 = 'hello'. Use the equality operator to compare them and print the result. Then create s3 = 'Hello' and compare it with s1. Explain the result."
  },
  {
    "notebook": "1_Comparison_Operators.ipynb",
    "chapter_index": "Comparison Operators",
    "exercise_number": 3,
    "difficulty": "beginner",
    "exercise": "Use the inequality operator (!=) to check if 7 is not equal to 7, and print the result. Then check if 7 is not equal to 8 and print that result too. Explain the outputs."
  },
  {
    "notebook": "1_Comparison_Operators.ipynb",
    "chapter_index": "Comparison Operators",
    "exercise_number": 4,
    "difficulty": "beginner",
    "exercise": "Create a variable age = 25. Use the greater than operator (>) to check if age is greater than 18, and print a message saying whether the person is an adult or not."
  },
  {
    "notebook": "1_Comparison_Operators.ipynb",
    "chapter_index": "Comparison Operators",
    "exercise_number": 5,
    "difficulty": "intermediate",
    "exercise": "Create variables score = 85 and passing_grade = 70. Use the less than or equal to operator (<=) to check if the score is failing (less than or equal to passing_grade). Print an appropriate message based on the result."
  },
  {
    "notebook": "1_Comparison_Operators.ipynb",
    "chapter_index": "Comparison Operators",
    "exercise_number": 6,
    "difficulty": "intermediate",
    "exercise": "Create two lists: list1 = [1, 2, 3] and list2 = [1, 2, 3]. Compare them using the equality operator (==) and print the result. Then compare them using the 'is' operator and print that result too. Explain the difference between == and 'is' in this context."
  },
  {
    "notebook": "1_Comparison_Operators.ipynb",
    "chapter_index": "Comparison Operators",
    "exercise_number": 7,
    "difficulty": "intermediate",
    "exercise": "Create two floating-point numbers: f1 = 0.1 + 0.2 and f2 = 0.3. Compare them using == and print the result. Explain why this might not be what you expected, and how to correctly compare floating-point numbers in Python."
  },
  {
    "notebook": "1_Comparison_Operators.ipynb",
    "chapter_index": "Comparison Operators",
    "exercise_number": 8,
    "difficulty": "intermediate",
    "exercise": "Write a function that takes a student's score as input and returns 'A' for scores >= 90, 'B' for scores >= 80, 'C' for scores >= 70, 'D' for scores >= 60, and 'F' for scores < 60. Test it with several different scores."
  },
  {
    "notebook": "1_Comparison_Operators.ipynb",
    "chapter_index": "Comparison Operators",
    "exercise_number": 9,
    "difficulty": "advanced",
    "exercise": "Create a function that compares two version strings (like '1.2.3' and '1.3.0') and returns True if the first version is older than the second. Hint: You'll need to split the strings and compare the numbers in each position."
  },
  {
    "notebook": "1_Comparison_Operators.ipynb",
    "chapter_index": "Comparison Operators",
    "exercise_number": 10,
    "difficulty": "advanced",
    "exercise": "Implement a custom comparison for a 'Person' class with attributes 'name' and 'age'. Two Person objects should be considered equal if they have the same name, regardless of age. Create the necessary method(s) to make == work for this class and test with different Person objects."
  }
] 