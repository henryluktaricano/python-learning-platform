[
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 1,
    "difficulty": "beginner",
    "exercise": "Write a while loop that prints numbers from 1 to 10 but uses break to exit the loop when the number 5 is reached."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 2,
    "difficulty": "beginner",
    "exercise": "Create a for loop that iterates through a string and uses continue to skip printing vowels."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 3,
    "difficulty": "beginner",
    "exercise": "Write a for loop with a conditional statement that uses pass as a placeholder for future code."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 4,
    "difficulty": "beginner",
    "exercise": "Create a while loop that counts up from 1, but uses continue to skip all multiples of 3."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 5,
    "difficulty": "beginner",
    "exercise": "Write a for loop that iterates through a list of numbers and uses break to exit the loop when a negative number is encountered."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 6,
    "difficulty": "beginner",
    "exercise": "Create a while loop that simulates a simple menu system. Use break to exit when the user selects an 'exit' option."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 7,
    "difficulty": "intermediate",
    "exercise": "Write a for loop that iterates through a list of strings and uses continue to skip strings that are shorter than 3 characters."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 8,
    "difficulty": "intermediate",
    "exercise": "Create a nested loop structure (a loop within a loop) and use break to exit the inner loop when a certain condition is met."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 9,
    "difficulty": "intermediate",
    "exercise": "Write a while loop that keeps asking for user input until a valid email address is entered (contains @ symbol). Use continue to re-prompt if the input is invalid."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 10,
    "difficulty": "intermediate",
    "exercise": "Create a function that uses pass as a placeholder for each of its conditional branches (if, elif, else)."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 11,
    "difficulty": "intermediate",
    "exercise": "Write a while loop that processes a list of items but uses break to stop if a specific 'stop word' is encountered."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 12,
    "difficulty": "intermediate",
    "exercise": "Create a for loop that iterates through a dictionary and uses continue to skip keys that start with a certain letter."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 13,
    "difficulty": "advanced",
    "exercise": "Write a nested loop structure where the inner loop uses break when a condition is met, but the outer loop continues executing for all iterations."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 14,
    "difficulty": "advanced",
    "exercise": "Create a while loop that counts iterations and uses break to exit after a maximum number of attempts if the user hasn't provided the correct input."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 15,
    "difficulty": "advanced",
    "exercise": "Write a for loop that iterates through a list of dictionaries, using continue to skip dictionaries that don't have a specific key."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 16,
    "difficulty": "advanced",
    "exercise": "Create a while loop that simulates a game where the player has 3 lives. Use break to exit when lives reach 0, and continue to skip a turn when a special condition is met."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 17,
    "difficulty": "advanced",
    "exercise": "Implement a simple calculator using a while loop that executes until the user enters 'exit'. Use break to exit and continue to handle invalid inputs."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 18,
    "difficulty": "advanced",
    "exercise": "Write a program with two nested for loops that iterate through two lists. Use break to stop the inner loop when certain elements are found."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 19,
    "difficulty": "advanced",
    "exercise": "Create a program that uses a while loop to read lines from a text file and uses continue to skip empty lines. Use break to stop reading when a specific word is found."
  },
  {
    "notebook": "3_While_Loops.ipynb",
    "chapter_index": "While Loops - Control Statements",
    "exercise_number": 20,
    "difficulty": "advanced",
    "exercise": "Create a program that uses a while loop to process user commands. Use different if-elif conditions for different commands, with pass as placeholders for features you plan to implement later."
  }
] 